{"version":3,"sources":["scripts/modules/board.js","scripts/modules/gameState.js","scripts/modules/scoreManager.js","scripts/_utils.js","scripts/modules/movement.js","scripts/modules/UIManager.js","scripts/modules/gameControl.js","scripts/modules/inputHandler.js","scripts/main.js"],"names":["board","newTiles","Array","fill","map","initializeBoard","gameField","document","querySelector","i","row","createElement","classList","add","j","cell","setAttribute","appendChild","updateBoardDOM","clearBoardDOM","tile","textContent","setTimeout","remove","resetBoard","col","querySelectorAll","forEach","innerHTML","className","GameState","gameStarted","gameOver","setGameStarted","value","isGameStarted","setGameOver","isGameOver","score","getScore","setScore","newScore","addedScore","updateScoreDisplay","addScore","mergedValue","currentScore","console","log","animateScoreChange","resetScore","scoreElement","addedScoreElement","style","opacity","transform","updateScore","createTile","moveTile","fromRow","fromCol","toRow","toCol","canMerge","mergeRow","mergeCol","mergeTiles","moveLeft","moved","totalCombinedValue","emptyCol","moveRight","moveUp","emptyRow","moveDown","hideMessages","updateStartButton","startButton","addEventListener","BoardModule","ScoreManager","GameControlModule","populateRandomCell","startGame","UIManager","emptyCells","push","length","Math","floor","random","randRow","randCol","checkForWin","checkForGameOver","updateAfterMove","listenForKeyboardEvents","e","key","InputHandler"],"mappings":"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","file":"main.0293a7d4.js","sourceRoot":"..\\src","sourcesContent":["export const board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nexport const newTiles = Array(4).fill().map(\n  () => Array(4).fill(false)\n);\n\n/**\n * Initializes the game board by creating and appending rows\n  and cells to the game field.\n Each cell is given a unique data attribute corresponding to its row and column.\n\n * @sideEffects Modifies the DOM by appending new elements.\n */\n\nexport function initializeBoard() {\n  const gameField = document.querySelector('.game-field');\n\n  // Loop through the number of rows\n  for (let i = 0; i < 4; i++) {\n    const row = document.createElement('div');\n\n    row.classList.add('row');\n\n    for (let j = 0; j < 4; j++) {\n      // Create a new cell element, add the 'field-cell' class,\n      // and set data attributes for row and column\n      const cell = document.createElement('div');\n\n      cell.classList.add('field-cell');\n      cell.setAttribute('data-row', i);\n      cell.setAttribute('data-col', j);\n      row.appendChild(cell);\n    }\n    gameField.appendChild(row);\n  }\n}\n\n/**\n * Updates the DOM representation of the game board\n    based on the current state of the 'board' variable.\n\n * First, it clears any existing tiles from the board.\n    Then, for every non-zero value in the 'board',\n    it creates and appends a corresponding tile DOM element.\n *\n * @sideEffects Modifies the DOM by removing old tiles and appending new ones.\n * Also, potentially sets a timeout for tile animations.\n */\n\nexport function updateBoardDOM() {\n  clearBoardDOM();\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      // If the board cell contains a non-zero value,\n      // create and append a tile DOM element\n      if (board[i][j] !== 0) {\n        const cell = document.querySelector(\n          `[data-row='${i}'][data-col='${j}']`\n        );\n        const tile = document.createElement('div');\n\n        tile.classList.add('tile');\n        tile.classList.add(`tile--${board[i][j]}`);\n        tile.textContent = board[i][j];\n\n        // If this tile is flagged as a new tile, add the 'tile--new' class\n        if (newTiles[i][j]) {\n          tile.classList.add('tile--new');\n        }\n\n        cell.appendChild(tile);\n\n        // If the tile is new,\n        //  set a timeout to remove the 'new' animation class after 300ms\n        if (newTiles[i][j]) {\n          setTimeout(() => {\n            tile.classList.remove('tile--new');\n            newTiles[i][j] = false;\n          }, 300);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets the game board to its initial state, setting all of its cells to 0.\n * Also, clears the DOM representation of the board.\n *\n * @sideEffects Modifies the state of the 'board' variable\n * and has side effects on the DOM.\n */\n\nexport function resetBoard() {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      board[row][col] = 0;\n    }\n  }\n\n  clearBoardDOM();\n}\n\n/**\n * Clears the DOM representation of the game board.\n * It removes all child elements (tiles) from each cell\n * and resets the class of each cell to its default.\n *\n * @sideEffects Modifies the DOM by removing tiles\n * and resetting class names of the cells.\n */\n\nexport function clearBoardDOM() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach(cell => {\n    cell.innerHTML = '';\n    cell.className = 'field-cell';\n  });\n};\n","export const GameState = {\n  gameStarted: false,\n  gameOver: false,\n\n  setGameStarted(value) {\n    this.gameStarted = value;\n  },\n\n  isGameStarted() {\n    return this.gameStarted;\n  },\n\n  setGameOver(value) {\n    this.gameOver = value;\n  },\n\n  isGameOver() {\n    return this.gameOver;\n  },\n};\n","/* eslint-disable no-console */\nlet score = 0;\n\nexport function getScore() {\n  return score;\n}\n\nexport function setScore(newScore) {\n  if (newScore !== score) {\n    const addedScore = newScore - score;\n\n    score = newScore;\n    updateScoreDisplay(addedScore);\n  }\n}\n\nexport function addScore(mergedValue) {\n  const currentScore = getScore();\n\n  console.log(`Adding ${mergedValue} to ${currentScore}`);\n\n  setScore(currentScore + mergedValue);\n  animateScoreChange();\n}\n\nexport function resetScore() {\n  score = 0;\n}\n\nexport function updateScoreDisplay(addedScore = 0) {\n  const scoreElement = document.querySelector('.game-score');\n  const addedScoreElement = document.querySelector('.game-score--added');\n\n  scoreElement.textContent = score;\n\n  if (addedScore > 0) {\n    console.log(`Updating display with added score: +${addedScore}`);\n\n    addedScoreElement.textContent = `+${addedScore}`;\n    addedScoreElement.style.opacity = '1';\n\n    setTimeout(() => {\n      addedScoreElement.style.opacity = '0';\n      addedScoreElement.style.transform = 'translateY(+2px)';\n    }, 400);\n  }\n}\n\nfunction animateScoreChange() {\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.style.transform = 'translateY(-3px)';\n\n  setTimeout(() => {\n    scoreElement.style.transform = '';\n  }, 300);\n}\n\nexport function updateScore(value) {\n  if (value > 0) {\n    setTimeout(() => {\n      addScore(value);\n    }, 200);\n  }\n}\n","import { newTiles, board } from './modules/board.js';\n\n/**\n * Creates and appends a tile to the game board.\n *\n * Given a row, column, and value, this function creates a new DOM element\n * to represent a tile. It then attaches the appropriate classes and\n * sets its text content. If the tile is flagged as 'new', an animation\n * will be triggered, and the 'new' flag will be reset after 300ms.\n *\n * @param {number} row - The row number where the tile should be placed.\n * @param {number} col - The column number where the tile should be placed.\n * @param {number} value - The numerical value of the tile.\n * @sideEffects Modifies the DOM by appending a tile and\n * sets a timeout for tile animations.\n */\n\nexport function createTile(row, col, value) {\n  newTiles[row][col] = true;\n\n  const tile = document.createElement('div');\n\n  tile.classList.add('tile');\n  tile.classList.add(`tile--${value}`);\n\n  if (newTiles[row][col]) {\n    tile.classList.add('tile--new');\n  }\n\n  tile.textContent = value;\n\n  const cell = document.querySelector(`[data-row='${row}'][data-col='${col}']`);\n\n  cell.appendChild(tile);\n\n  setTimeout(() => {\n    tile.classList.remove('tile--new');\n    newTiles[row][col] = false; // Reset the new tile flag\n  }, 300);\n}\n\n/**\n * Moves a tile from a specified position to another on the board.\n *\n * @param {number} fromRow - The row index of the tile to move.\n * @param {number} fromCol - The column index of the tile to move.\n * @param {number} toRow - The row index to move the tile to.\n * @param {number} toCol - The column index to move the tile to.\n * @sideEffects - Modifies the state of the 'board' variable.\n */\n\nexport function moveTile(fromRow, fromCol, toRow, toCol) {\n  board[toRow][toCol] = board[fromRow][fromCol];\n  board[fromRow][fromCol] = 0;\n}\n\n/**\n * Checks if a merge is possible between two specified positions on the board.\n *\n * @param {number} row - The row index of the first tile.\n * @param {number} col - The column index of the first tile.\n * @param {number} mergeRow - The row index of the second tile.\n * @param {number} mergeCol - The column index of the second tile.\n * @returns {boolean} - Returns `true` if a merge is possible;\n *    otherwise, `false`.\n */\n\nexport function canMerge(row, col, mergeRow, mergeCol) {\n  return (\n    board[row][col] !== 0 && board[row][col] === board[mergeRow][mergeCol]\n  );\n}\n\n/**\n * Merges two tiles at specified positions on the board.\n * The resulting tile will be placed at the position of the second tile,\n * and its value will be the sum of the two merged tiles.\n *\n * @param {number} row - The row index of the first tile.\n * @param {number} col - The column index of the first tile.\n * @param {number} mergeRow - The row index of the second tile.\n * @param {number} mergeCol - The column index of the second tile.\n * @returns {number} - Returns the value of the merged tile.\n * @sideEffects - Modifies the state of the 'board' variable.\n */\n\nexport function mergeTiles(row, col, mergeRow, mergeCol) {\n  const mergedValue = board[row][col] * 2;\n\n  board[mergeRow][mergeCol] = mergedValue;\n  board[row][col] = 0;\n\n  return mergedValue;\n}\n","import { board } from './board.js';\nimport { updateScore } from './scoreManager.js';\nimport { moveTile, mergeTiles, canMerge } from '../_utils.js';\n\n/**\n * Moves tiles on the board to the left.\n *\n * @returns {boolean} - Returns `true` if any tile was moved or merged;\n *    otherwise, `false`.\n * @sideEffects - Modifies the state of the 'board' variable\n *    and may update the game's score if any tiles are merged.\n */\n\nexport function moveLeft() {\n  let moved = false;\n  let totalCombinedValue = 0;\n\n  for (let row = 0; row < 4; row++) {\n    let emptyCol = 0;\n\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col] === 0) {\n        continue;\n      }\n\n      if (emptyCol !== col) {\n        moveTile(row, col, row, emptyCol);\n        moved = true;\n      }\n\n      if (\n        emptyCol !== 0 && canMerge(row, emptyCol, row, emptyCol - 1)\n      ) {\n        totalCombinedValue += mergeTiles(row, emptyCol, row, emptyCol - 1);\n        moved = true;\n      } else {\n        emptyCol++;\n      }\n    }\n  }\n\n  updateScore(totalCombinedValue);\n\n  return moved;\n}\n\n/**\n * Moves tiles on the board to the right.\n *\n * @returns {boolean} - Returns `true` if any tile was moved or merged;\n *    otherwise, `false`.\n * @sideEffects - Modifies the state of the 'board' variable\n *    and may update the game's score if any tiles are merged.\n */\n\nexport function moveRight() {\n  let moved = false;\n  let totalCombinedValue = 0;\n\n  for (let row = 0; row < 4; row++) {\n    let emptyCol = 3;\n\n    for (let col = 3; col >= 0; col--) {\n      if (board[row][col] === 0) {\n        continue;\n      }\n\n      if (emptyCol !== col) {\n        moveTile(row, col, row, emptyCol);\n        moved = true;\n      }\n\n      if (\n        emptyCol !== 3\n        && canMerge(row, emptyCol, row, emptyCol + 1)\n      ) {\n        totalCombinedValue += mergeTiles(row, emptyCol, row, emptyCol + 1);\n        moved = true;\n      } else {\n        emptyCol--;\n      }\n    }\n  }\n\n  updateScore(totalCombinedValue);\n\n  return moved;\n}\n\n/**\n * Moves tiles on the board upwards.\n *\n * @returns {boolean} - Returns `true` if any tile was moved or merged;\n *    otherwise, `false`.\n * @sideEffects - Modifies the state of the 'board' variable\n *    and may update the game's score if any tiles are merged.\n */\n\nexport function moveUp() {\n  let moved = false;\n  let totalCombinedValue = 0;\n\n  for (let col = 0; col < 4; col++) {\n    let emptyRow = 0;\n\n    for (let row = 0; row < 4; row++) {\n      if (board[row][col] === 0) {\n        continue;\n      }\n\n      if (emptyRow !== row) {\n        moveTile(row, col, emptyRow, col);\n        moved = true;\n      }\n\n      if (\n        emptyRow !== 0\n        && canMerge(emptyRow, col, emptyRow - 1, col)\n      ) {\n        totalCombinedValue += mergeTiles(emptyRow, col, emptyRow - 1, col);\n        moved = true;\n      } else {\n        emptyRow++;\n      }\n    }\n  }\n\n  updateScore(totalCombinedValue);\n\n  return moved;\n}\n\n/**\n * Moves tiles on the board downwards.\n *\n * @returns {boolean} - Returns `true` if any tile was moved or merged;\n *    otherwise, `false`.\n * @sideEffects - Modifies the state of the 'board' variable\n *    and may update the game's score if any tiles are merged.\n */\n\nexport function moveDown() {\n  let moved = false;\n  let totalCombinedValue = 0;\n\n  for (let col = 0; col < 4; col++) {\n    let emptyRow = 3; // Start from the bottom row\n\n    for (let row = 3; row >= 0; row--) { // Traverse upwards from the bottom\n      if (board[row][col] === 0) {\n        continue;\n      }\n\n      if (emptyRow !== row) {\n        moveTile(row, col, emptyRow, col);\n        moved = true;\n      }\n\n      if (\n        emptyRow !== 3 // Ensure we're not on the bottom-most row\n        && canMerge(emptyRow, col, emptyRow + 1, col)\n      ) {\n        totalCombinedValue += mergeTiles(emptyRow, col, emptyRow + 1, col);\n        moved = true;\n      } else {\n        emptyRow--; // Move the emptyRow pointer upwards for the next iteration\n      }\n    }\n  }\n\n  updateScore(totalCombinedValue);\n\n  return moved;\n}\n\n// still having issue with score, maybe consider some async\n","import * as ScoreManager from './scoreManager.js';\nimport * as GameControlModule from './gameControl.js';\nimport { GameState } from './gameState.js';\nimport * as BoardModule from './board.js';\n\nexport function hideMessages() {\n  document\n    .querySelector('.message-lose')\n    .classList.add('hidden');\n\n  document\n    .querySelector('.message-win')\n    .classList.add('hidden');\n\n  document\n    .querySelector('.message-start')\n    .classList.add('hidden');\n}\n\nexport function updateStartButton(startButton) {\n  startButton.textContent\n    = GameState.isGameStarted() ? 'Restart' : 'Start';\n\n  startButton.addEventListener('click', function() {\n    BoardModule.resetBoard();\n    ScoreManager.resetScore();\n\n    GameControlModule.populateRandomCell();\n    GameControlModule.populateRandomCell();\n\n    BoardModule.updateBoardDOM();\n    ScoreManager.updateScoreDisplay();\n\n    hideMessages();\n    GameState.setGameStarted(true);\n\n    startButton.textContent = 'Restart';\n  });\n}\n","import { createTile } from '../_utils.js';\nimport * as UIManager from './UIManager.js';\nimport { board, updateBoardDOM } from './board.js';\nimport * as BoardModule from './board.js';\nimport { resetScore, updateScoreDisplay } from './scoreManager.js';\nimport * as GameState from './gameState.js';\n\nexport function startGame() {\n  BoardModule.resetBoard();\n  resetScore();\n  populateRandomCell();\n  populateRandomCell();\n  updateBoardDOM();\n  updateScoreDisplay();\n  UIManager.hideMessages();\n}\n\n/**\n * Finds an empty cell in the game board and populates it with a new tile.\n *\n * This function scans the entire game board looking for empty cells.\n * It then randomly selects one of these empty cells and populates it\n * with a new tile. The new tile will have a value of either 2 (90% chance)\n * or 4 (10% chance).\n *\n * @sideEffects Modifies the state of the 'board' variable\n * and updates the DOM with a new tile.\n */\n\nexport function populateRandomCell() {\n  const emptyCells = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col] === 0) {\n        emptyCells.push([row, col]);\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const [randRow, randCol]\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const value = Math.random() < 0.9 ? 2 : 4;\n\n    board[randRow][randCol] = value;\n    createTile(randRow, randCol, value);\n  }\n}\n\n/**\n * Checks the game board to see if the player has achieved the 2048 tile.\n *\n * If a cell with the value 2048 is found, the game is considered won.\n * A winning message is then displayed, and the game is marked as over.\n *\n * @sideEffects Potentially modifies the DOM by revealing the win message\n * and changes the state of 'gameOver'.\n */\n\nexport function checkForWin() {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col] === 2048) {\n        const messageWin = document.querySelector('.message-win');\n\n        messageWin.classList.remove('hidden');\n        GameState.setGameOver(true);\n      }\n    }\n  }\n}\n\n/**\n * Checks if the game is over by evaluating if there are no more\n * valid moves left on the board. The function performs the following checks:\n * 1. If there are any empty cells (cells with a value of 0).\n * 2. If there are any vertically adjacent cells with the same value.\n * 3. If there are any horizontally adjacent cells with the same value.\n *\n * If any of the above conditions are met, the game is not over and\n * the function returns `false`. If none of the conditions are met,\n * it displays a loss message and returns `true`, indicating the game is over.\n *\n * @returns {boolean} - Returns `true` if the game is over; otherwise, `false`.\n *\n * @sideEffects - If the game is over, it modifies the DOM by showing\n * the loss message.\n */\n\nexport function checkForGameOver() {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col] === 0) {\n        return false;\n      } // Empty cell found\n\n      if (row < 3 && board[row][col] === board[row + 1][col]) {\n        return false;\n      } // Vertical match\n\n      if (col < 3 && board[row][col] === board[row][col + 1]) {\n        return false;\n      } // Horizontal match\n    }\n  }\n\n  const messageLose = document.querySelector('.message-lose');\n\n  messageLose.classList.remove('hidden');\n\n  GameState.setGameOver(true);\n\n  return true;\n}\n\nexport function updateAfterMove() {\n  populateRandomCell();\n  updateBoardDOM();\n  updateScoreDisplay();\n  checkForWin();\n  checkForGameOver();\n}\n","import { moveUp, moveDown, moveLeft, moveRight } from './movement.js';\nimport * as GameControlModule from './gameControl.js';\nimport { GameState } from './gameState.js';\n\nexport function listenForKeyboardEvents() {\n  document.addEventListener('keydown', function(e) {\n    if (\n      !GameState.isGameStarted()\n      || GameState.isGameOver()\n    ) {\n      return;\n    }\n\n    let moved = false;\n\n    switch (e.key) {\n      case 'ArrowUp':\n        moved = moveUp();\n        break;\n      case 'ArrowDown':\n        moved = moveDown();\n        break;\n      case 'ArrowLeft':\n        moved = moveLeft();\n        break;\n      case 'ArrowRight':\n        moved = moveRight();\n        break;\n    }\n\n    if (moved) {\n      GameControlModule.updateAfterMove();\n    }\n  });\n}\n","import * as BoardModule from './modules/board.js';\nimport { GameState } from './modules/gameState.js';\nimport * as InputHandler from './modules/inputHandler.js';\nimport * as UIManager from './modules/UIManager.js';\n\nconst startButton = document.querySelector('.start');\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  BoardModule.initializeBoard();\n  InputHandler.listenForKeyboardEvents();\n});\n\nUIManager.updateStartButton(startButton);\nInputHandler.listenForKeyboardEvents();\n\nGameState.setGameStarted(false);\n"]}